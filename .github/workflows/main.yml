name: Blog Update Notification

on:
  push:
    branches:
    - main

jobs:
  notify-subscribers:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Detect Changes
      run: |
        #!/bin/bash

        # Fetch the last two commits
        git fetch --depth=2
    
        # Get the file changes between the last two commits
        # The '|| true' ensures that the command doesn't cause an error exit
        changed_files=$(git diff --name-status HEAD^ HEAD | grep -E '\.md$|\.mdx$' || true)
    
        # Check if there are any MD/MDX files
        if [ -z "$changed_files" ]; then
          echo "No MD/MDX files changed"
          exit 0  # Exit with a success status
        fi
    
        # Get the date of the last commit
        last_commit_date=$(git log -1 --format=%cd --date=short)
    
        # Process each changed MD/MDX file
        echo "$changed_files" | while read -r status file; do
          echo "Processing $status $file..."
    
          # Skip files with 'draft' in the filename
          if [[ "$file" == *"draft"* ]]; then
            echo "Skipping draft file: $file"
            continue
          fi
    
          # Extract YAML front matter
          IFS=$'\n' read -r -d '' -a front_matter < <(sed -n '/^---$/,/^---$/p' "$file" && printf '\0')
          
          # Extract the date from the front matter
          article_date=""
          for line in "${front_matter[@]}"; do
            if [[ "$line" == "date:"* ]]; then
              article_date=$(echo "$line" | cut -d "'" -f 2)
              break
            fi
          done
    
          # Check if article date is older than the last commit date
          if [[ "$article_date" < "$last_commit_date" ]]; then
            echo "Skipping older article: $file"
            continue
          fi
    
          # Add your commands to process each file
    
          # Example: Extract title (assuming title is the first line of the file)
          title=$(head -n 1 "$file" || echo "No title found")
          echo "Title: $title"
    
          # Additional processing...
        done

    - name: Send Email via ConvertKit
      env:
        CONVERTKIT_API_KEY: ${{ secrets.CONVERTKIT_API_KEY }}
      run: |
        # Add your script/command to send emails using ConvertKit's API
